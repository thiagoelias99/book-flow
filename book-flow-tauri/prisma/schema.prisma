// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id       String @id @default(cuid())
  name     String
  userName String @unique @map("user_name")
  password String
  level    String

  UserLevel UserLevel @relation(fields: [level], references: [slug], onDelete: NoAction, onUpdate: NoAction)
  Loan      Loan[]

  @@index([userName], name: "user_name")
  @@map("users")
}

model UserLevel {
  slug        String @id
  description String

  User User[]

  @@map("user_levels")
}

model Books {
  id     String @id @default(cuid())
  title  String
  author String
  isbn   String
  status String

  BookStatus BookStatus @relation(fields: [status], references: [slug], onDelete: NoAction, onUpdate: NoAction)
  Loan       Loan[]

  @@index([title, author])
  @@map("books")
}

model BookStatus {
  slug        String @id
  description String

  Books Books[]

  @@map("book_status")
}

model Loan {
  id         String   @id @default(cuid())
  bookId     String   @map("book_id")
  userId     String   @map("user_id")
  loanDate   DateTime @map("loan_date")
  returnDate DateTime @map("return_date")
  status     String

  User       User       @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Books      Books      @relation(fields: [bookId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  LoanStatus LoanStatus @relation(fields: [status], references: [slug], onDelete: NoAction, onUpdate: NoAction)

  @@index([bookId, userId])
  @@map("loans")
}

model LoanStatus {
  slug        String @id
  description String

  Loan Loan[]

  @@map("loan_status")
}
